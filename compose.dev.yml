version: '3.8'
name: geos-ui-dev
secrets:
  certificate:
    file: ${CA:-ca-bundle.crt}
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enrollment.enabled=true
      # - ELASTIC_PASSWORD=${ES_PASSWORD}
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ES_PASSWORD} -k http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 20
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    depends_on:
      elasticsearch:
        condition: service_healthy
  # vault:
  #   image: docker.io/hashicorp/vault:latest
  #   # depends_on:
  #   #   - consul
  #   ports:
  #     - "8200:8200"
  #   volumes:
  #     - ./vault/config:/vault/config
  #     - ./vault/policies:/vault/policies
  #     - vault_data:/vault/file
  #     - ./vault/logs:/vault/logs
  #   cap_add:
  #     - IPC_LOCK  # Required for mlock for security
  #   restart: always
  #   command: ["server"]
  #   environment:
  #     VAULT_ADDR: http://127.0.0.1:8200
  #     VAULT_API_ADDR: http://127.0.0.1:8200
  # consul:
  #   image: docker.io/hashicorp/consul:latest
  #   network_mode: "host"
  #   volumes:
  #     - consul_data:/consul/data
  #     - ./consul/config:/consul/config
  #   ports:
  #     - "8500:8500"

  backend:
    depends_on:
      postgres:
        condition: service_healthy
      test_postgres:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      
      # - vault
      # - consul
    image: docker.io/moonlyss/geos-ui-backend
    secrets:
      - certificate
    build:
      context: backend
      secrets:
        - certificate
      target: development
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    security_opt:
      - seccomp:unconfined
    working_dir: /app
    volumes:
      - ./backend/src:/app
    ports:
      - "8000:8000"
    environment:
      CURL_CA_BUNDLE: /run/secrets/certificate
      GEOS_UI_DB_USER: ${DB_USER}
      GEOS_UI_DB_PASSWD: ${DB_PASSWD}
      GEOS_UI_DB_NAME: geos-ui-dev
      GEOS_UI_TEST_DB_PORT: 5433
      GEOS_UI_AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      GEOS_UI_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      GEOS_UI_AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      GEOS_UI_APP_SECRET: ${BACKEND_APP_SECRET:-CHANGE_BACKEND_SECRET}
      GEOS_UI_OAUTH2_REFRESH_TOKEN_GENERATOR: True
      GEOS_UI_ENABLE_AUTHENTICATION: False
      GEOS_UI_HTTPS_CAFILE: /run/secrets/certificate
      ES_PASSWORD: ${ES_PASSWORD}

  # frontend:
  #   ports:
  #     - "5173:5173"
  #   working_dir: /app
  #   secrets:
  #     - certificate
  #   image: docker.io/moonlyss/geos-ui-frontend:latest
  #   build:
  #     secrets:
  #       - certificate
  #     context: frontend
  #     target: dev
  #   command: ["pnpm", "dev", "--host"]
  #   volumes:
  #     - ./frontend/:/app/
  #     - /app/node_modules
  #   depends_on:
  #     - backend
  #       # condition: service_healthy
  #   environment:
  #     APP_ENV: dev
  #     APP_DEBUG: true
  #     ENABLE_AUTH: false
  #     PUBLIC_ENABLE_AUTH: false
  #     AUTH_SECRET: ${FRONT_AUTH_SECRET:-CHANGE_FRONTEND_SECRET}
  #     PUBLIC_BACKEND_ADDRESS: http://localhost:8000

  
  # postgraphile:
  #   image: graphile/postgraphile
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "5000:5000"
  #   command:
  #     [
  #         "--connection",
  #         "postgres://${DB_USER}:${DB_PASSWD}@postgres:5432/geos-ui-dev",
  #         "--port",
  #         "5000",
  #         "--schema",
  #         "public",
  #     ]

  # pgadmin:
  #   image: docker.io/dpage/pgadmin4:latest
  #   ports:
  #     - "5050:80"
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-fake.email@localhost}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #   depends_on:
  #     - postgres
  postgres:
    image: docker.io/library/postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: geos-ui-dev
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "geos-ui-dev"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 5s  
    volumes:
      - postgres_data:/var/lib/postgresql/data
  test_postgres:
    image: docker.io/library/postgres:latest
    environment:
      POSTGRES_DB: geos-ui-test
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWD}
      POSTGRES_PORT: 5433
  jupyter:
    image: quay.io/jupyter/datascience-notebook
    ports:
      - "8888:8888"
    # command: start-notebook.py
    # environment:
    #   - JUPYTER_TOKEN="easy"
    volumes:
      - jupyter_data:/home/jovyan/work

volumes:
  postgres_data:
  elasticsearch_data:
  # consul_data:
  jupyter_data:
  # vault_data: