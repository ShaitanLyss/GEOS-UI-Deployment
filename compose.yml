<<<<<<< HEAD
version: '3.8'
name: geos-ui
secrets:
  certificate:
    file: ${CA}
services:
  elasticsearch:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enrollment.enabled=true
      - ELASTIC_PASSWORD=${ES_PASSWORD}
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
        #    healthcheck:
        #      test: ["CMD-SHELL", "curl -u elastic:${ES_PASSWORD} -k http://localhost:9200/_cluster/health || exit 1"]
        #interval: 30s
        #timeout: 5s
        #retries: 20
  frontend:
    container_name: frontend-2
    userns_mode: "keep-id"
    image: docker.io/moonlyss/geos-ui-frontend:latest
    build:
      context: frontend
    ports:
      - "7000:3000"
    depends_on:
      - backend
        # condition: service_healthy
    environment:
      APP_ENV: prod
      APP_DEBUG: false
      AUTH_SECRET: ${FRONT_AUTH_SECRET}
      BACKEND_ADDRESS: http://backend:8000
      PUBLIC_BACKEND_ADDRESS: ${PUBLIC_BACKEND_ADDRESS}

  backend:
    restart: on-failure
    userns_mode: "keep-id"
    user: "root"
    depends_on:
      postgres:
        condition: service_healthy
        # elasticsearch:
        #condition: service_healthy
    image: docker.io/moonlyss/geos-ui-backend:latest
    volumes:
      - backend_data:/data
    secrets:
      - certificate
    build:
      context: backend
    security_opt:
      - seccomp:unconfined
    ports:
      - "8001:8000"
    environment:
      PYGEOS: ${PYGEOS}
      GEOS_UI_DB_USER: ${DB_USER}
      GEOS_UI_DB_PASSWD: ${DB_PASSWD}
      GEOS_UI_DB_NAME: geos-ui
      GEOS_UI_DB_HOST: postgres
      GEOS_UI_AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      GEOS_UI_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      GEOS_UI_AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      GEOS_UI_APP_SECRET: ${BACKEND_APP_SECRET}
      GEOS_UI_OAUTH2_REFRESH_TOKEN_GENERATOR: True
      GEOS_UI_ENABLE_AUTHENTICATION: False
      GEOS_UI_HTTPS_CAFILE: /run/secrets/certificate
      ES_PASSWORD: ${ES_PASSWORD}

  postgres:
    image: docker.io/library/postgres:16
    userns_mode: "keep-id"
    environment:
      POSTGRES_DB: geos-ui
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d geos-ui-dev"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 5s
    volumes:
      - postgres_data_2:/var/lib/postgresql/data
    
  
  # postgraphile:
  #   image: graphile/postgraphile
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "5000:5000"
  #   command:
  #     [
  #         "--connection",
  #         "postgres://${DB_USER}:${DB_PASSWD}@postgres:5432/geos-ui-dev",
  #         "--port",
  #         "5000",
  #         "--schema",
  #         "public",
  #     ]

  # pgadmin:
  #   image: docker.io/dpage/pgadmin4:latest
  #   ports:
  #     - "5050:80"
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}

    # caddy:
  #   secrets:
  #     - certificate
  #   userns_mode: "keep-id"
  #   user: "root"
  #   security_opt:
  #     - seccomp:unconfined
  #   restart: always
  #   image: docker.io/caddy:latest
  #   command: sh -c "cat /run/secrets/certificate >> /etc/ssl/certs/ca-certificates.crt &&  caddy reverse-proxy --from intlog02:7001 --to frontend:7000"

  #   volumes:
  #     - caddy_data:/data
  #   expose:
  #     - "7001"
  #   ports:
  #     - "7001:7001"

volumes:
  elasticsearch_data:
  postgres_data_2:
  caddy_data:
  backend_data:
=======
version: '3.8'
name: geos-ui
secrets:
  certificate:
    file: ${CA}
services:
  elasticsearch:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enrollment.enabled=true
      - ELASTIC_PASSWORD=${ES_PASSWORD}
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ES_PASSWORD} -k http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 20
  frontend:
    container_name: frontend-2
    userns_mode: "keep-id"
    image: docker.io/moonlyss/geos-ui-frontend:latest
    build:
      context: frontend
    ports:
      - "7000:3000"
    depends_on:
      - backend
        # condition: service_healthy
    environment:
      APP_ENV: prod
      APP_DEBUG: false
      AUTH_SECRET: ${FRONT_AUTH_SECRET}
      BACKEND_ADDRESS: http://backend:8000
      PUBLIC_BACKEND_ADDRESS: ${PUBLIC_BACKEND_ADDRESS}

  backend:
    restart: on-failure
    userns_mode: "keep-id"
    user: "root"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    image: docker.io/moonlyss/geos-ui-backend:latest
    volumes:
      - backend_data:/data
    secrets:
      - certificate
    build:
      context: backend
    security_opt:
      - seccomp:unconfined
    ports:
      - "8001:8000"
    environment:
      PYGEOS: ${PYGEOS}
      GEOS_UI_DB_USER: ${DB_USER}
      GEOS_UI_DB_PASSWD: ${DB_PASSWD}
      GEOS_UI_DB_NAME: geos-ui
      GEOS_UI_DB_HOST: postgres
      GEOS_UI_AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      GEOS_UI_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      GEOS_UI_AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      GEOS_UI_APP_SECRET: ${BACKEND_APP_SECRET}
      GEOS_UI_OAUTH2_REFRESH_TOKEN_GENERATOR: True
      GEOS_UI_ENABLE_AUTHENTICATION: False
      GEOS_UI_HTTPS_CAFILE: /run/secrets/certificate
      ES_PASSWORD: ${ES_PASSWORD}

  postgres:
    image: docker.io/library/postgres:16
    userns_mode: "keep-id"  
    environment:
      POSTGRES_DB: geos-ui
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d geos-ui-dev"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 5s
    volumes:
      - postgres_data_2:/var/lib/postgresql/data
    
  
  # postgraphile:
  #   image: graphile/postgraphile
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "5000:5000"
  #   command:
  #     [
  #         "--connection",
  #         "postgres://${DB_USER}:${DB_PASSWD}@postgres:5432/geos-ui-dev",
  #         "--port",
  #         "5000",
  #         "--schema",
  #         "public",
  #     ]

  # pgadmin:
  #   image: docker.io/dpage/pgadmin4:latest
  #   ports:
  #     - "5050:80"
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}

    # caddy:
  #   secrets:
  #     - certificate
  #   userns_mode: "keep-id"
  #   user: "root"
  #   security_opt:
  #     - seccomp:unconfined
  #   restart: always
  #   image: docker.io/caddy:latest
  #   command: sh -c "cat /run/secrets/certificate >> /etc/ssl/certs/ca-certificates.crt &&  caddy reverse-proxy --from intlog02:7001 --to frontend:7000"

  #   volumes:
  #     - caddy_data:/data
  #   expose:
  #     - "7001"
  #   ports:
  #     - "7001:7001"

volumes:
  elasticsearch_data:
  postgres_data_2:
  caddy_data:
  backend_data:
>>>>>>> 8b6542b0fdef69723867cea0c7fde46ff3a22390
